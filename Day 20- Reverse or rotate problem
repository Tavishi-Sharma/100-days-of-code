/* We have given a numeric string. cut the string into substring of "sz" size.
We have to write a function to check whether String should reverse or rotate by one left position.
The function takes two arguement:-one is string and other is the size of which chunks will cut.
If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk; otherwise rotate it to the left by one position. Put together these modified chunks and return the result as a string.
If:
sz is <= 0 or if str is empty return ""
sz is greater (>) than the length of str it is impossible to take a chunk of size sz hence return "".
Example- {"66443875",8}
Expected output-"64438756"

Sample test case 1:{"123456987654", 6}
Output-"234561876549"

Sample test case 2:{"664438769", 8}
Output-"67834466"

Sample test case 3:{"", 8}
Output-""

Sample test case 4:{"563000655734469485", 4}
Output-"0365065073456944"

Sample test case 5:{"123456779", 0}
Output-""
*/

class RevRot {
    
    public static String revRot(String strng, int sz) {
        if ((sz==0) || (strng == "") || (sz > strng.length())) return "";  // INVALID CASES -> Return empty string
    
        String result = "";                                                // this string will contain the result to be returned
        
        for (int i = 0; i < (strng.length()/sz); i++){                     // for each chunk of sz elements
            String chunk = strng.substring(i*sz, i*sz + sz);
            int digitSum = 0;
                                                                           // Because our final goal is to determine if the digtSum is odd or even
            for (int j = 0; j < sz; j++){                                  // There is no need of summing the cubes of the numbers 
                digitSum += Character.getNumericValue(chunk.charAt(j));    // odd^n remains odd, even^n remains even 
            }                                                              // so the proportion of even and odd numbers remains the same 
            
            if ((digitSum % 2) == 0){                                      // REVERSE CHUNK
                for (int k = sz-1; k >= 0; k--){                           //   by adding every character of the chunk to the result from right to left
                    result += chunk.charAt(k);                               
                }
            }else{                                                         // ROTATE CHUNK TO THE LEFT BY ONE POSITION
                result += chunk.substring(1) + chunk.charAt(0);            //   by adding the chunk to the result with its first character in the end
            }            
        }
        
        return result;
    }
}
