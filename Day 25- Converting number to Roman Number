/*
Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.

Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. 
In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 
2008 is written as 2000=MM, 8=VIII; or MMVIII. 
1666 uses each Roman symbol in descending order: MDCLXVI.

Symbol    Value
I          1
V          5
X          10
L          50
C          100
D          500
M          1,000

Example:- conversion.solution(100)
Output:- C

Constraint:- the number should be positive

Sample test 1:- conversion.solution(101)
Output:-CI

Sample test 2:-conversion.solution(1)
Output:-I

Sample test 3:-conversion.solution(6)
Output:-VI
*/
public class Conversion {

    public String solution(int number) {
        String romanNumbers[] = {"M", "CMXC", "CM", "D", "CDXC", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};   //arary of Roman Numbers
        int values[] = {1000, 990, 900, 500, 490, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};        //array of values corresponding to the Roman Numbers
        StringBuilder result = new StringBuilder();
        int i = 0;                                           //initial pointer
        while (number > 0 || values.length == (i - 1)) {
            while ((number - values[i]) >= 0) {
                number -= values[i];
                result.append(romanNumbers[i]);
            }
            i++;
        }
        return result.toString();              //converting the result to string
    }
}
