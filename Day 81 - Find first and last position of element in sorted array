/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Sample test case 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Sample test case 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Sample tset case 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
      int[] a = {-1,-1};
        for(int i = 0; i < nums.length; i++){
           if(nums[i] == target){
               a[0] = i;
                while(i<nums.length && nums[i] == target){
                    a[1] = i;
                    i++;
                    
               } 
               break;
           }
        }
         return a;
    }
}
