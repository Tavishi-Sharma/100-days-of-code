/*summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(

So, if we are to start our Tribonacci sequence with [1, 1, 1] as a starting input (AKA signature), we have this sequence:

[1, 1 ,1, 3, 5, 9, 17, 31, ...]
But what if we started with [0, 0, 1] as a signature? As starting with [0, 1] instead of [1, 1] basically shifts the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:

[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]
Well, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a signature array/list, returns the first n elements - signature included of the so seeded sequence.

n is always positive and if equal to 0 the will return empty array


Sample test case:{1,1,1} , 10
Output:{1,1,1,3,5,9,17,31,57,105}

Sample test case:{0,0,1} , 10
Output:{0,0,1,1,2,4,7,13,24,44}

Sample test case:{0,1,1} , 10
Output:{0,1,1,2,4,7,13,24,44,81}

*/

public class Xbonacci {

  public double[] tribonacci(double[] s, int n) {
    double[] arr = new double[n];
      for(int i = 0; i < n; i++){
        arr[i] = (i<3)?s[i]:arr[i-3]+arr[i-2]+arr[i-1];
      }
      return arr;

  }
}
