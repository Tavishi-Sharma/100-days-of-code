/*
Create a function that differentiates a polynomial for a given value of x.

Your function will receive 2 arguments: a polynomial as a string, and a point to evaluate the equation as an integer.

Assumptions:
-->There will be a coefficient near each x, unless the coefficient equals 1 or -1.
-->There will be an exponent near each x, unless the exponent equals 0 or 1.
-->All exponents will be greater or equal to zero

Sample test case 1:- differentiate("12x+2", 3)
Output:- 12
Explanation:- differentiation of the input polynomial is constant 12.

Sample test case 2:- differentiate("x^2-x", 3)
Output:- 5
Explanation:- differentiation of the input polynomial is 2x-1. Putting value of x=3, the output will be 5. 

Sample test case 3:- differentiate("-5x^2+10x+4", 3)
Output:- -20
Explanation:- differentiation of the input polynomial is -10x+10. Putting value of x=3, the output will be -20.
*/

import java.math.BigInteger;
import java.util.*;

public class Equation {
    
    public static BigInteger differentiate(String equation, long x) {
    String[] sArr = equation.replaceAll("\\+", " \\+").replaceAll("\\-", " \\-").split(" ");
		int p, co, pw;
		BigInteger res = BigInteger.ZERO;
		BigInteger xBig = new BigInteger("" + x);
		for (String s : sArr) {
			if ((p = s.indexOf('x')) != -1) {
				co = (p == 0 || s.charAt(p - 1) == '+') ? 1
						: (s.charAt(p - 1) == '-') ? -1 : Integer.valueOf(s.substring(0, p));
				pw = (s.indexOf('^') == -1) ? 1 : Integer.valueOf(s.substring(p + 2));
				res = res.add(xBig.pow(pw - 1).multiply(new BigInteger("" + co)).multiply(new BigInteger("" + pw)));
			}
		}
		return res;
  }
}
