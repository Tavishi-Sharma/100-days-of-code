/*
Create a function which take three strings as arguement-one is original and other two are substring which when merged may or may not gives the original string.
Using the function we have to check whether the 2 parts of the string will give the same original string after merging or not.
If after mergig the strings we get the original string then the function will return true, otherwise will return false.

Example:-
'codewars' is a merge from 'cdw' and 'oears':

    s:  c o d e w a r s   = codewars
part1:  c   d   w         = cdw
part2:    o   e   a r s   = oears

Sample test case 1:-isMerge("codewars","code","wars")
Output:-true

Sample test case 2:-isMerge("codewars","cdwr","oeas")
Output:-true

Sample test case 3:-isMerge("codewars","cod","wars")
Output:-false

Sample test case 4:-isMerge("Making progress", "Mak pross", "inggre")
Output:-true

Sample test case 5:-isMerge("codewars", "c", "o")
Output:-false

Sample test case 6:-isMerge("", "", "")
Output:-true

*/
public class StringMerger {

    public static boolean isMerge(String s, String part1, String part2) {
       if (s.equals("")) {
			return part1.equals("") && part2.equals("");
		} else {
			boolean isMerge1 = false, isMerge2 = false;
			if (part1.length() > 0 && s.charAt(0) == part1.charAt(0))
				isMerge1 = isMerge(s.substring(1), part1.substring(1), part2);
			if (part2.length() > 0 && s.charAt(0) == part2.charAt(0))
				isMerge2 = isMerge(s.substring(1), part1, part2.substring(1));
			return isMerge1 || isMerge2;
		}
    }

}
