/*
In mathematics, a Diophantine equation is a polynomial equation, usually with two or more unknowns, such that only the integer solutions are sought or studied.

In this kata we want to find all integers x, y (x >= 0, y >= 0) solutions of a diophantine equation of the form:

x2 - 4 * y2 = n
(where the unknowns are x and y, and n is a given positive number) in decreasing order of the positive xi.

If there is no solution return [] or "[]" or "". (See "RUN SAMPLE TESTS" for examples of returns).

Examples:
solEquaStr(90005) --> "[[45003, 22501], [9003, 4499], [981, 467], [309, 37]]"
solEquaStr(90002) --> "[]"
Hint:
x2 - 4 * y2 = (x - 2*y) * (x + 2*y)

Sample test case 1:-sol_equa(17)
Output:-[[9, 4]]
Sample test case 2:-sol_equa(12)
Output:-[[4, 1]]
Sample test case 3:-sol_equa(13) 
Output:-[[7, 3]]
Sample test case 4:-sol_equa(16) 
Output:-[[4, 0]]
*/
import java.util.*;

public class Dioph {
  
  public static String solEquaStr(long n) {
    StringJoiner sj = new StringJoiner(", ", "[", "]");

        System.out.println(Math.sqrt(n));
        for (long i = 1; i <= Math.sqrt(n) ; i++)
            if (n % i == 0) {
                long j = n / i;
                if ((i % 2 == j % 2) && ((j - i) % 4 == 0)) {
                    long x = (j + i) / 2;
                    long y = (j - i) / 4;
                    sj.add(String.format("[%d, %d]", x, y));
                }
            }

        return sj.toString();
  }
  
}
