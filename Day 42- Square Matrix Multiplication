/*
Square matrix are the matrix which has same number of rows and columns.
Write a function that accepts two square (NxN) matrices (two dimensional arrays), and returns the product of the two. Only square matrices will be given.
We will be given two matrices of NxN and we have to get a matrix C that will hold the result of the multiplication of the two matrices.
To fill in cell [n][m] of matrix C, you need to first multiply the elements in the nth row of matrix A by the elements in the mth column of matrix B, then take the sum of all those products. This will give you the value for cell [m][n] in matrix C.

Example:-
A         B          C
|1 2|  x  |3 2|  =  | 5 4|
|3 2|     |1 1|     |11 8|

Detailed calculation:

C[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] = 1*3 + 2*1 =  5
C[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] = 1*2 + 2*1 =  4
C[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] = 3*3 + 2*1 = 11
C[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] = 3*2 + 2*1 =  8

Sample test 1:- a={{0,0},{0,0}} and b={{1,1},{1,1}}
Output:-c={{0,0},{0,0}}

Sample test 2:- a={{1,2},{3, 2}} and b={{3,2},{1,1}}
Output:-c={{5,4},{11,8}}

Sample test 3:- a={{-1,3},{2,-6}}  and b={{1,1},{2,3}}
Output:-c={{5,8},{-10,-16}}

Sample test 4:- a={{1,2,3},{3,2,1},{2,1,3}} and b={{4,5,6},{6,5,4},{4,6,5}}
Output:- c{{ 28, 33, 29 }, 
					{ 28, 31, 31 }, 
					{ 26, 33, 31 }}
*/
public class Kata {

	public static int[][] matrixMultiplication(int[][] a, int[][] b) {
   int n = a.length;
    int[][] c = new int[n][n];       //new array to store the result of multiplication
    for (int i = 0; i < n; i++) {    //loop for the rows
      for (int j = 0; j < n; j++) {  //loop for the columns
        for (int k = 0; k < n; k++) {  //loop to traverse each element in a row 
          c[i][j] += a[i][k] * b[k][j];
        }
      }
    }
    return c;   //returning the matrix
  }
}


