/*
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.
A subarray is a contiguous part of an array.

Sample test case 1:-
Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

Sample test case 2:-
Input: nums = [5], k = 9
Output: 0
*/
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int mod[] = new int[k];
        int n=nums.length;
        Arrays.fill(mod, 0);
        int cumSum = 0;
        for (int i = 0; i < n; i++) {
            cumSum += nums[i];
           mod[((cumSum % k) + k) % k]++;
        }
 
        
        int result = 0;
 
        
        for (int i = 0; i < k; i++)
 
            if (mod[i] > 1)
                result += (mod[i] * (mod[i] - 1)) / 2;
 
        result += mod[0];
 
        return result;
    }
}
    
