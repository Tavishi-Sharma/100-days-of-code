/*Some numbers have funny properties. For example:

89 --> 8¹ + 9² = 89 * 1

695 --> 6² + 9³ + 5⁴= 1390 = 695 * 2

46288 --> 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51

Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p

we want to find a positive integer k, if it exists, such that the sum of the digits of n taken to the successive powers of p is equal to k * n.
In other words:

Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k

If it is the case we will return k, if not return -1.
Constraint: n and p will always be given as strictly positive integers.

Example: 27,1
Explaination-2^1+7^2=51. Now, 51%27 !=0 so the it will return -1.
Output:-1

Sample test case `1:(89,1)
output:1

Sample test case 2:(92,1)
output:-1

Sample test case 3:(46288,3)
output:51
*/

public class DigPow {
	//Below function takes number and the power
	public static long digPow(int n, int p) {
		String str=Integer.toString(n);  //converting the number into string
    int total=0;
    for(int i=0;i<str.length();i++){
     char ch=str.charAt(i);  //getting one character of the strating at a time
      int num=Character.getNumericValue(ch);  //getting the numeric value of the character
      total+=Math.pow(num,p);   //using in-bulit power function
      p++;
    }
    if(total%n==0){
      return (total/n);    //getting the factor
    }
    else{
    return -1;
      }   
	}
}
