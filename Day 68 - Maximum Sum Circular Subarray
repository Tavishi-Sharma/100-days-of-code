/*
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Sample test case 1:-
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

Sample test case 2:-
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

Sample test case 3:-
Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
*/

//Approach used:- Kadane's Algorithm
class Solution {
    public int maxSubarraySumCircular(int[] a) {
        int n=a.length;
        if(n==1)
          return a[0];
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        int cur_max=a[0],max_far=a[0];
        int cur_min=a[0],min_far=a[0];
        for(int i=1;i<n;i++){
            cur_max=Math.max(cur_max+a[i],a[i]);
            max_far=Math.max(max_far,cur_max);
            cur_min=Math.min(cur_min+a[i],a[i]);
            min_far=Math.min(min_far,cur_min);
        }
        if(min_far==sum){
            return max_far;
        }
        return Math.max(max_far,sum-min_far);
    }
}
